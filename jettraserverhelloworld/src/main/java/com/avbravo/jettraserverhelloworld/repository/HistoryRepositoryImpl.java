package com.avbravo.jettraserverhelloworld.repository;
// <editor-fold defaultstate="collapsed" desc="imports">

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.annotation.PostConstruct;
import org.eclipse.microprofile.config.Config;
import org.eclipse.microprofile.config.inject.ConfigProperty;
/**
* MongoDB
*/
import com.jmoordb.core.processor.model.JmoordbException;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Filters.and;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import org.bson.Document;
import com.mongodb.client.model.FindOneAndUpdateOptions;
import com.mongodb.client.model.ReturnDocument;
import com.mongodb.client.result.InsertOneResult;
import org.bson.BsonInt64;
import org.bson.conversions.Bson;
import org.bson.BsonDocument;
import com.mongodb.client.model.Filters;
import com.mongodb.client.result.UpdateResult;
import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.ListIndexesIterable;
import com.mongodb.client.MongoIterable;
import org.bson.types.ObjectId;
/**
* Java
*/
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.Optional;
import java.util.function.Supplier;
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.model.Pagination;
import com.jmoordb.core.model.Sorted;
import com.jmoordb.core.util.JmoordbCoreDateUtil;
import java.util.HashSet;
import com.avbravo.jettraserverhelloworld.model.History;
import org.eclipse.microprofile.config.ConfigProvider;


// </editor-fold>
@ApplicationScoped
public class HistoryRepositoryImpl  implements HistoryRepository{
// <editor-fold defaultstate="collapsed" desc="inject">

    @Inject
    MongoClient mongoClient;
/**
* Microprofile Config
*/
//    @Inject
//    Config config;
//    @Inject
//    @ConfigProperty(name = "mongodb.databasehistory")
//    String mongodbDatabase;

       Config config = ConfigProvider.getConfig();

        String mongodbDatabase= config.getValue("mongodb.databasehistory", String.class);
    
    String mongodbCollection = "history";
/**
* AutogeneratedRepository
*/
    @Inject
    com.avbravo.jettraserverhelloworld.repository.AutogeneratedRepository autogeneratedRepository;
/**
* Supplier
*/
    @Inject
    com.avbravo.jettraserverhelloworld.model.HistorySupplier historySupplier;
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Exception">

   private JmoordbException exception;
public JmoordbException getJmoordbException() {
   if(exception == null || exception.getLocalizedMessage()== null ){
    exception = new JmoordbException("");
   }
    return exception;
 }
public void setJmoordbException(JmoordbException exception) {    this.exception = exception; }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.avbravo.jettraserverhelloworld.model.History> lookup(com.jmoordb.core.model.Search search ) ">

    @Override
    public java.util.List<com.avbravo.jettraserverhelloworld.model.History> lookup(com.jmoordb.core.model.Search search) {
        List<History> list = new ArrayList<>();
        try {
           MongoCollection<Document> collection = getCollection().get();
               MongoCursor<Document> cursor;
               Document sortQuery = new Document();
               if (search.getSorted().getSort() == null || search.getSorted().getSort().isEmpty()) {
               } else {
                   sortQuery = search.getSorted().getSort();
               }
               if (search.getPagination() == null || search.getPagination().getPage() < 1) {
                  cursor = collection.find(search.getFilter()).allowDiskUse(Boolean.TRUE).sort(sortQuery).iterator();
               } else {
                    cursor = collection.find(search.getFilter()).allowDiskUse(Boolean.TRUE)
                                        .skip(search.getPagination().skip())
                                        .limit(search.getPagination().limit())
                                        .sort(sortQuery).iterator();
               }
               try{
                  while (cursor.hasNext()) {
                       list.add(historySupplier.get(History::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
              exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.lang.Long count(com.jmoordb.core.model.Search[] search ) ">

    @Override
    public java.lang.Long count(com.jmoordb.core.model.Search[] search) {
        Long contador = 0L;
        try {
           MongoCollection<Document> collection = getCollection().get();
               Document whereCondition = new Document();
               if (search.length != 0) {
                  whereCondition = search[0].getFilter();
               } 
               if (whereCondition.isEmpty()) {
                  contador = collection.countDocuments();
               } else {
                  contador = collection.countDocuments(whereCondition);
               }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
              exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return contador;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Optional<History> save(History history)">

    @Override
    public Optional<History> save(History history) {
        try {
               String mongodbDatabaseValue = mongodbDatabase;
               String mongodbCollectionValue = mongodbCollection;
               if (!getDynamicDatabase().equals("")) {
                   mongodbDatabaseValue = getDynamicDatabase();
                }
               if (!getDynamicCollection().equals("")) {
                   mongodbCollectionValue = getDynamicCollection();
                }
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
               setDynamicDatabase("");
               MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
               setDynamicCollection("");
               	Boolean success = Boolean.FALSE;
	while (!success) {
               history.setIdhistory(autogeneratedRepository.generate(mongodbDatabase, mongodbCollection));
               if (findByPkInternal(history.getIdhistory(),mongodbDatabaseValue,  mongodbCollectionValue).isPresent()) { 
                   MessagesUtil.warning("There is already a record with that id");
                    exception = new JmoordbException("There is already a record with that id");
                               }
               	else{
		  success= Boolean.TRUE;
	     }
	   }

              Boolean haveId = Boolean.FALSE;
               Document doc =historySupplier.toDocument(history);
             if(doc.containsKey("_id")){
                   haveId = Boolean.TRUE;
                   doc.remove("_id");
             }
            InsertOneResult insertOneResult = collection.insertOne(doc);

               if (insertOneResult.getInsertedId() != null) {
                  	if (haveId) {
	String _id =insertOneResult.getInsertedId().asObjectId().toString();
         _id = _id.substring(_id.indexOf("{")+1,_id.indexOf("}"));
         _id = _id.replace("value=", "");
         history = historySupplier.putObjectId(history,_id);
	}
return Optional.of(history);
               }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
               exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return Optional.empty();
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Boolean update(History history)">

    @Override
    public Boolean update(History history) {
        try {
               String mongodbDatabaseValue = mongodbDatabase;
               String mongodbCollectionValue = mongodbCollection;
               if (!getDynamicDatabase().equals("")) {
                   mongodbDatabaseValue = getDynamicDatabase();
                }
               if (!getDynamicCollection().equals("")) {
                   mongodbCollectionValue = getDynamicCollection();
                }
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
               setDynamicDatabase("");
               MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
               setDynamicCollection("");
               if (!findByPkInternal(history.getIdhistory(),mongodbDatabaseValue,  mongodbCollectionValue).isPresent()) { 
                   MessagesUtil.warning("Not found a record with that id");
                    exception = new JmoordbException("Not found a record with that id");
                    return Boolean.FALSE;
               }
               Bson filter = Filters.empty();
               filter = Filters.eq("idhistory",history.getIdhistory());
               UpdateOptions options = new UpdateOptions().upsert(false);
               UpdateResult result = collection.updateOne(filter,historySupplier.toUpdate(history),options);
               if (result.getModifiedCount() > 0) {
                  return Boolean.TRUE;
               }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
               exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return Boolean.FALSE;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<History> findAllPaginationSorted(Pagination pagination, Sorted sorted)">

    @Override
    public List<History> findAllPaginationSorted(Pagination pagination, Sorted sorted) {
        List<History> list = new ArrayList<>();
        try {
           MongoCollection<Document> collection = getCollection().get();
               MongoCursor<Document> cursor;
               		cursor = collection.find().allowDiskUse(Boolean.TRUE)
					.skip(pagination.skip())
			.limit(pagination.limit())
			.sort(sorted.getSort())
		.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(historySupplier.get(History::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
               exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<History> findAll()">

    @Override
    public List<History> findAll() {
        List<History> list = new ArrayList<>();
        try {
           MongoCollection<Document> collection = getCollection().get();
               MongoCursor<Document> cursor;
               		cursor = collection.find().allowDiskUse(Boolean.TRUE)
				.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(historySupplier.get(History::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
               exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<History> findAllPagination(Pagination pagination)">

    @Override
    public List<History> findAllPagination(Pagination pagination) {
        List<History> list = new ArrayList<>();
        try {
           MongoCollection<Document> collection = getCollection().get();
               MongoCursor<Document> cursor;
               		cursor = collection.find().allowDiskUse(Boolean.TRUE)
					.skip(pagination.skip())
			.limit(pagination.limit())
		.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(historySupplier.get(History::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
              exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<History> findAllSorted(Sorted sorted)">

    @Override
    public List<History>  findAllSorted(Sorted sorted) {
        List<History> list = new ArrayList<>();
        try {
           MongoCollection<Document> collection = getCollection().get();
               MongoCursor<Document> cursor;
               		cursor = collection.find().allowDiskUse(Boolean.TRUE)
					.sort(sorted.getSort())
		.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(historySupplier.get(History::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
               exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public Optional<History> findByPk(Long id )">

    public Optional<History> findByPk(Long id ) {
        try {
           MongoCollection<Document> collection = getCollection().get();
            Document doc = collection.find(eq("idhistory", id)).allowDiskUse(Boolean.TRUE).first();
            if(doc == null){
               return Optional.empty();
            }
            History history = historySupplier.get(History::new, doc);
            return Optional.of(history);
       } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
       }
       return Optional.empty();
    }
// </editor-fold>


// <editor-fold defaultstate="collapsed" desc="public Optional<History> findByPkInternal(Long id, String mongodbDatabaseValue, String mongodbCollectionValue  )">

    public Optional<History> findByPkInternal(Long id , String mongodbDatabaseValue, String mongodbCollectionValue ) {
        try {
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            Document doc = collection.find(eq("idhistory", id)).allowDiskUse(Boolean.TRUE).first();
            if(doc == null){
               return Optional.empty();
            }
            History history = historySupplier.get(History::new, doc);
            return Optional.of(history);
       } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
       }
       return Optional.empty();
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Long deleteByPK(Long id )">

    @Override
    public Long deleteByPk(Long id){
        try {
           MongoCollection<Document> collection = getCollection().get();
               MongoCursor<Document> cursor;
               Bson filter = Filters.eq("idhistory",id);

		com.mongodb.client.result.DeleteResult deleteResult = collection.deleteOne(filter);

               return deleteResult.getDeletedCount();
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
              exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return 0L;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Long deleteMany(com.jmoordb.core.model.Search search)">

    @Override
    public Long deleteMany(com.jmoordb.core.model.Search search){
        try {
           MongoCollection<Document> collection = getCollection().get();
                Document whereCondition = new Document();
		whereCondition = search.getFilter();
		com.mongodb.client.result.DeleteResult deleteResult = collection.deleteMany(whereCondition);

               return deleteResult.getDeletedCount();
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
              exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return 0L;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Long updateMany(Bson query, Bson update)">


   @Override
   public Long updateMany(Bson query, Bson update) {
          try {

              MongoCollection<Document> collection = getCollection().get();

              UpdateResult result = collection.updateMany(query, update);
              return result.getModifiedCount();
            } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
              exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            }
             return 0L;
   }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public String createIndex(Bson bson)">

@Override
public String createIndex(Bson bson) {
       String result = "";
       try {
           String mongodbDatabaseValue = mongodbDatabase;
           String mongodbCollectionValue = mongodbCollection;
           if (!getDynamicDatabase().equals("")) {
               mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            result = collection.createIndex(bson);
        } catch (Exception e) {
           MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
           exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return result;
       }  // </editor-fold>;
// <editor-fold defaultstate="collapsed" desc="void dropIndex(Bson bson)">


@Override
public void dropIndex(Bson bson) {
try {
     String mongodbDatabaseValue = mongodbDatabase;
     String mongodbCollectionValue = mongodbCollection;
     if (!getDynamicDatabase().equals("")) {
         mongodbDatabaseValue = getDynamicDatabase();
     }
     if (!getDynamicCollection().equals("")) {
        mongodbCollectionValue = getDynamicCollection();
     }
     MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
     setDynamicDatabase("");
     MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
     setDynamicCollection("");
     collection.dropIndex(bson);
} catch (Exception e) {
     MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
     exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
}
}
 // </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Optional<ListIndexesIterable<Document>> listIndexes()">

  @Override
  public Optional<ListIndexesIterable<Document>> listIndexes(){
         ListIndexesIterable<Document> result;
         try {
             String mongodbDatabaseValue = mongodbDatabase;
             String mongodbCollectionValue = mongodbCollection;
             if (!getDynamicDatabase().equals("")) {
                 mongodbDatabaseValue = getDynamicDatabase();
             }
             if (!getDynamicCollection().equals("")) {
               mongodbCollectionValue = getDynamicCollection();
             }
             MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
             setDynamicDatabase("");
             MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
             setDynamicCollection("");
             result = collection.listIndexes();
             return Optional.of(result);
           } catch (Exception e) {
             MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
           }
             return  Optional.empty();
   }
//  </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Optional<MongoIterable<String>> listCollectionNames() ">


 @Override
 public Optional<MongoIterable<String>> listCollectionNames(){
        MongoIterable<String> result;
        try {
             String mongodbDatabaseValue = mongodbDatabase;
             String mongodbCollectionValue = mongodbCollection;
             if (!getDynamicDatabase().equals("")) {
                 mongodbDatabaseValue = getDynamicDatabase();
             }
             if (!getDynamicCollection().equals("")) {
                 mongodbCollectionValue = getDynamicCollection();
             }
             MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
             setDynamicDatabase("");
             MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
             setDynamicCollection("");
             result = database.listCollectionNames();
             return Optional.of(result);
         } catch (Exception e) {
             MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
          return  Optional.empty();
      }
 // </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public Optional<MongoCollection<Document>> getCollection()">
 @Override
  public Optional<MongoCollection<Document>> getCollection() {

         try {
             String mongodbDatabaseValue = mongodbDatabase;
             String mongodbCollectionValue = mongodbCollection;
             if (!getDynamicDatabase().equals("")) {
                 mongodbDatabaseValue = getDynamicDatabase();
             }
             if (!getDynamicCollection().equals("")) {
                 mongodbCollectionValue = getDynamicCollection();
             }
             MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
             setDynamicDatabase("");
             MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
             setDynamicCollection("");
             return Optional.of(collection);
         } catch (Exception e) {
             MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
             exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return Optional.empty();
     }
// </editor-fold
// <editor-fold defaultstate="collapsed" desc="public void init()">


   @PostConstruct
    public void init() {
          try {

            } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
              exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            }
   }
// </editor-fold>

}